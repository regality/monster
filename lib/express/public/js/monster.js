// Generated by CoffeeScript 1.3.3
(function() {
  var fetchNextBatch, finishBatch, lastPercent, log, processBatch, processJob, processNext, progress,
    __slice = [].slice;

  log = function() {
    var args, div, message;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    message = args.join(' ');
    $(".logs div:gt(10)").remove();
    div = $("<div/>");
    div.text(message);
    return $(".logs").prepend(div);
  };

  $("#donut").donutchart({
    size: 300,
    fgColor: "#F52887"
  });

  lastPercent = 0;

  progress = function(percent) {
    percent = Math.round(percent * 100);
    if (percent !== lastPercent) {
      if (percent > lastPercent) {
        $("#donut").donutchart("animate", lastPercent, percent);
      } else {
        $("#donut").donutchart("animate", 0, percent);
      }
      return lastPercent = percent;
    }
  };

  finishBatch = function(batch) {
    return $.ajax('/finish', {
      type: 'POST',
      data: {
        results: JSON.stringify(batch.results)
      },
      success: function() {
        progress(1);
        log("done with batch", batch.batch);
        return setTimeout(function() {
          return fetchNextBatch();
        }, 500);
      }
    });
  };

  fetchNextBatch = function() {
    log("fetching next batch");
    progress(0);
    return $.ajax('/jobs', {
      success: processBatch
    });
  };

  processBatch = function(batch) {
    var job, _ref;
    batch.current = batch.current === void 0 ? 0 : batch.current + 1;
    progress(batch.current / batch.jobs.length);
    if ((_ref = batch.results) == null) {
      batch.results = [];
    }
    if (batch.current === batch.jobs.length) {
      return finishBatch(batch);
    }
    job = batch.jobs[batch.current];
    return processNext(job, function(err, result) {
      if (err) {
        batch.results.push({
          error: err
        });
      } else {
        batch.results.push({
          n: job.n,
          result: result
        });
      }
      if (batch.current % 1000 === 0) {
        return setTimeout(function() {
          return processBatch(batch);
        }, 0);
      } else {
        return processBatch(batch);
      }
    });
  };

  processNext = function(data, cb) {
    return processJob(data.n, data.job, cb);
  };

  processJob = window.process;

  fetchNextBatch();

}).call(this);
